# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file            controllers.Assets.versioned(path="/public", file)
# Map webjar resources
GET         /webjars/*file           controllers.Assets.versioned(path="/META-INF/resources/webjars", file)

# Language switching
GET         /language/:lang          controllers.LanguageController.switchLanguage(lang: String, request: Request)

# Authentication routes
GET         /login                   controllers.AuthController.showLogin(request: Request)
POST        /login                   controllers.AuthController.login(request: Request)
GET         /register                controllers.AuthController.showRegister(request: Request)
POST        /register                controllers.AuthController.register(request: Request)
GET         /logout                  controllers.AuthController.logout(request: Request)
GET         /forgot-password         controllers.AuthController.showForgotPassword(request: Request)
POST        /forgot-password         controllers.AuthController.forgotPassword(request: Request)
GET         /reset-password          controllers.AuthController.showResetPassword(request: Request, token: String)
POST        /reset-password          controllers.AuthController.resetPassword(request: Request)

# An example controller showing a sample home page
GET         /                        controllers.HomeController.index(request: Request)
# An example controller showing how to use dependency injection
GET         /count                   controllers.CountController.count
# An example controller showing how to write asynchronous code
GET         /message                 controllers.AsyncController.message

# Crops list (look at the default values for pagination parameters)
GET         /crops                   controllers.CropController.list(request: Request, p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")

# Add crop
GET         /crops/new               controllers.CropController.create(request: Request)
POST        /crops                   controllers.CropController.save(request: Request)

# Edit existing crop
GET         /crops/:id               controllers.CropController.edit(request: Request, id:Long)
POST        /crops/:id               controllers.CropController.update(request: Request, id:Long)

# Delete a crop
POST        /crops/:id/delete        controllers.CropController.delete(request: Request, id:Long)

# Fields list (look at the default values for pagination parameters)
GET         /fields                  controllers.FieldController.list(request: Request, p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")

# Add field
GET         /fields/new              controllers.FieldController.create(request: Request)
POST        /fields                  controllers.FieldController.save(request: Request)

# Edit existing field
GET         /fields/:id              controllers.FieldController.edit(request: Request, id:Long)
POST        /fields/:id              controllers.FieldController.update(request: Request, id:Long)

# Delete a field
POST        /fields/:id/delete       controllers.FieldController.delete(request: Request, id:Long)

# Work history list (look at the default values for pagination parameters)
GET         /work-history            controllers.WorkHistoryController.list(request: Request, p:Int ?= 0, s ?= "date", o ?= "desc", f ?= "")

# Add work history
GET         /work-history/new        controllers.WorkHistoryController.create(request: Request)
POST        /work-history            controllers.WorkHistoryController.save(request: Request)

# Edit existing work history
GET         /work-history/:id        controllers.WorkHistoryController.edit(request: Request, id:Long)
POST        /work-history/:id        controllers.WorkHistoryController.update(request: Request, id:Long)

# Delete a work history
POST        /work-history/:id/delete controllers.WorkHistoryController.delete(request: Request, id:Long)

# Soil diagnostics list (look at the default values for pagination parameters)
GET         /soil-diagnostics        controllers.SoilDiagnosticController.list(request: Request, p:Int ?= 0, s ?= "diagnosticDate", o ?= "desc", f ?= "")

# Add soil diagnostic
GET         /soil-diagnostics/new    controllers.SoilDiagnosticController.create(request: Request)
POST        /soil-diagnostics        controllers.SoilDiagnosticController.save(request: Request)

# Edit existing soil diagnostic
GET         /soil-diagnostics/:id    controllers.SoilDiagnosticController.edit(request: Request, id:Long)
POST        /soil-diagnostics/:id    controllers.SoilDiagnosticController.update(request: Request, id:Long)

# Delete a soil diagnostic
POST        /soil-diagnostics/:id/delete controllers.SoilDiagnosticController.delete(request: Request, id:Long)

# Pesticide registration management (admin only)
GET         /pesticides              controllers.PesticideController.list(request: Request, p:Int ?= 0, s ?= "registrationNumber", o ?= "asc", f ?= "")
GET         /pesticides/upload       controllers.PesticideController.showUpload(request: Request)
POST        /pesticides/upload       controllers.PesticideController.upload(request: Request)
POST        /pesticides/clear        controllers.PesticideController.clear(request: Request)
